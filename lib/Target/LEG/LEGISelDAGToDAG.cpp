//===-- LEGISelDAGToDAG.cpp - A dag to dag inst selector for LEG ----------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the LEG target.
//
//===----------------------------------------------------------------------===//

#include "LEG.h"
#include "LEGTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

#include "LEGInstrInfo.h"

using namespace llvm;

/// LEGDAGToDAGISel - LEG specific code to select LEG machine
/// instructions for SelectionDAG operations.
///
namespace {
class LEGDAGToDAGISel : public SelectionDAGISel {

public:
  explicit LEGDAGToDAGISel(LEGTargetMachine &TM) : SelectionDAGISel(TM) {}

  void Select(SDNode *N) override;

  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset);

  StringRef getPassName() const override {
    return "LEG DAG->DAG Pattern Instruction Selection";
  }

private:
  bool SelectMoveImmediate(SDNode *N);
  bool SelectConditionalBranch(SDNode *N);

// Include the pieces autogenerated from the target description.
#include "LEGGenDAGISel.inc"
};
} // end anonymous namespace

bool LEGDAGToDAGISel::SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    EVT PtrVT = getTargetLowering()->getPointerTy(CurDAG->getDataLayout());
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), PtrVT);
    Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
    return true;
  }
  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress ||
      Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
    return false; // direct calls.
  }

  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
  return true;
}

bool LEGDAGToDAGISel::SelectMoveImmediate(SDNode *N) {
  // Make sure the immediate size is supported.
  ConstantSDNode *ConstVal = cast<ConstantSDNode>(N);
  uint64_t ImmVal = ConstVal->getZExtValue();
  uint64_t SupportedMask = 0xfffffffff;
  if ((ImmVal & SupportedMask) != ImmVal) {
    return false;
  }

  // Select the low part of the immediate move.
  uint64_t LoMask = 0xffff;
  uint64_t HiMask = 0xffff0000;
  uint64_t ImmLo = (ImmVal & LoMask);
  uint64_t ImmHi = (ImmVal & HiMask);
  SDValue ConstLo = CurDAG->getTargetConstant(ImmLo, N, MVT::i32);
  MachineSDNode *Move =
      CurDAG->getMachineNode(LEG::MOVLOi16, N, MVT::i32, ConstLo);

  // Select the low part of the immediate move, if needed.
  if (ImmHi) {
    SDValue ConstHi = CurDAG->getTargetConstant(ImmHi >> 16, N, MVT::i32);
    Move = CurDAG->getMachineNode(LEG::MOVHIi16, N, MVT::i32, SDValue(Move, 0),
                                  ConstHi);
  }

  ReplaceNode(N, Move);

  return true;
}

bool LEGDAGToDAGISel::SelectConditionalBranch(SDNode *N) {
  SDValue Chain = N->getOperand(0);
  SDValue Cond = N->getOperand(1);
  SDValue LHS = N->getOperand(2);
  SDValue RHS = N->getOperand(3);
  SDValue Target = N->getOperand(4);

  // Generate a comparison instruction.
  EVT CompareTys[] = {MVT::Other, MVT::Glue};
  SDVTList CompareVT = CurDAG->getVTList(CompareTys);
  SDValue CompareOps[] = {LHS, RHS, Chain};
  SDNode *Compare = CurDAG->getMachineNode(LEG::CMP, N, CompareVT, CompareOps);

  // Generate a predicated branch instruction.
  CondCodeSDNode *CC = cast<CondCodeSDNode>(Cond.getNode());
  SDValue CCVal = CurDAG->getTargetConstant(CC->get(), N, MVT::i32);
  SDValue BranchOps[] = {CCVal, Target, SDValue(Compare, 0),
                         SDValue(Compare, 1)};
  ReplaceNode(N, CurDAG->getMachineNode(LEG::Bcc, N, MVT::Other, BranchOps));

  return true;
}

void LEGDAGToDAGISel::Select(SDNode *N) {
  switch (N->getOpcode()) {
  case ISD::Constant:
    if (SelectMoveImmediate(N)) {
      return;
    }
    break;
  case ISD::BR_CC:
    if (SelectConditionalBranch(N)) {
      return;
    }
    break;
  }

  SelectCode(N);
}

/// createLEGISelDag - This pass converts a legalized DAG into a
/// LEG-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createLEGISelDag(LEGTargetMachine &TM) {
  return new LEGDAGToDAGISel(TM);
}
